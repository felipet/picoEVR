#*****************************************************************************************
# Vivado (TM) v2019.2.1 (64-bit)
#
# picoevr_base.tcl: Tcl script for re-creating project 'picoEVR'
#
# Generated by Vivado on Wed Feb 05 16:03:52 CET 2020
# IP Build 2729494 on Thu Dec  5 07:38:25 MST 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (picoevr_base.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "picoEVR"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "picoevr_base.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir      [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--carrier_rev"  { incr i; set carrier_hw_rev  [lindex $::argv $i] }
      "--enable_debug" { incr i; set generate_ilas   [lindex $::argv $i] }
      "--enable_dio"   { incr i; set add_dio         [lindex $::argv $i] }
      "--enable_ecats" { incr i; set add_ecats       [lindex $::argv $i] }
      "--enable_ecatm" { incr i; set add_ecatm       [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

set numFMC 0
# Check if more than one FMC is enabled. If so, error as only one FMC can
# be added to the design...
if {[string equal $add_dio "yes"]} {
    set numFMC [expr $numFMC + 1]
}
if {[string equal $add_ecats "yes"]} {
    set numFMC [expr $numFMC + 1]
}
if {[string equal $add_ecatm "yes"]} {
    set numFMC [expr $numFMC + 1]
}
if {$numFMC > 1} {
    puts "ERROR: More than one FMC target has been enabled. Only one FMC can be supported"
    exit 1
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../../output/vivado_project"]"

# Set the directory path for the new project
set proj_dir "[file normalize "$origin_dir/../../output/vivado_project"]"

# Top-level HDL wrapper file
set hdl_dir "${origin_dir}/../bd/picoevr_system_arch/hdl"
set hdl_wrapper_file "picoevr_system_arch_wrapper_${carrier_hw_rev}.vhd"

# Create project
create_project ${_xil_proj_name_} "./fpga/output/vivado_project" -part xc7z030sbg485-1

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../../srcs/libs/hdl-ip-repo"] [file normalize "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi4_pkg.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_row.vhd"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_sw_pkg.vhd"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_switch.vhd"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_config_pkg.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_components_pkg.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/sizing.vhd"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_functions_pkg.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi_read_ctrl.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi_write_ctrl.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/field_core.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_address_decoder.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_axi.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_core.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_rd_encoder.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_rd_interface.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_shadowing.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_wr_interface.vhdl"] \
 [file normalize "${origin_dir}/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/picoevr_channel_mapper_top.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi4_pkg.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_row.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_SW" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_sw_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_SW" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/crossbar_switch.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_SW" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_config_pkg.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_components_pkg.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/crossbar_sw/sizing.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_functions_pkg.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi_read_ctrl.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/axi_write_ctrl.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/field_core.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_address_decoder.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_axi.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_core.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_rd_encoder.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_rd_interface.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_shadowing.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/Crossbar_sw_RegMap/register_bank_wr_interface.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL 2008" -objects $file_obj
set_property -name "library" -value "Crossbar_sw_RegMap" -objects $file_obj

set file "$origin_dir/../../srcs/libs/hdl-ip-repo/crossbar_sw/src/hdl/picoevr_channel_mapper_top.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set constr_obj [get_filesets constrs_1]

# Variable to hold list of constraints files
set constr_file ""

# Process to add a constraints file to the project
proc add_constr_file { origin_dir file_name constr_obj constr_file} {
  upvar $constr_file file
  set file "[file normalize "$origin_dir/../constraints/${file_name}"]"
  set file_added [add_files -norecurse -fileset $constr_obj [list $file]]
  set file "$origin_dir/../constraints/${file_name}"
  set file [file normalize $file]
}

# Add/Import constrs file and set constrs file properties
add_constr_file $origin_dir "picoevr_${carrier_hw_rev}.xdc" $constr_obj $constr_file
set_property target_constrs_file "$origin_dir/../constraints/picoevr_${carrier_hw_rev}.xdc" $constr_obj

set timing_xdc [file normalize "$origin_dir/../constraints/picoevr_${carrier_hw_rev}_timing.xdc"]

if {[file exists $timing_xdc]} {
  puts "Adding timing rules to the constraints set"
  add_constr_file $origin_dir "picoevr_${carrier_hw_rev}_timing.xdc" $constr_obj $constr_file
}

if {[string equal $generate_ilas "yes"]} {
  puts "Debug cores enabled"
  add_constr_file $origin_dir "picoevr_${carrier_hw_rev}_dbg.xdc" $constr_obj $constr_file
}

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "picoevr_system_arch_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Adding sources referenced in BDs, if not already added

# Hierarchical cell: debug_slice
proc create_hier_cell_debug_slice { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_debug_slice() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 4 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir O -from 0 -to 0 Dout2
  create_bd_pin -dir O -from 0 -to 0 Dout3
  create_bd_pin -dir O -from 0 -to 0 Dout4

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {5} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {5} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {5} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {5} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create instance: xlslice_4, and set properties
  set xlslice_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_4 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {4} \
   CONFIG.DIN_TO {4} \
   CONFIG.DIN_WIDTH {5} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_4

  # Create port connections
  connect_bd_net -net Net1 [get_bd_pins Din] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din] [get_bd_pins xlslice_4/Din]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins Dout] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins Dout1] [get_bd_pins xlslice_1/Dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins Dout2] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins Dout3] [get_bd_pins xlslice_3/Dout]
  connect_bd_net -net xlslice_4_Dout [get_bd_pins Dout4] [get_bd_pins xlslice_4/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Process to add the required IP, ports and connections to the block
# diagram to support the FMC-DIO-5ch-ttl.
#
# Takes the following required arguments:
# - design_name - name of the block diagram, ( i.e. picoevr_system_arch )
#
proc add_dio_to_bd { design_name } {

  # Open block design
  open_bd_design [get_files $design_name.bd]

  # Create instance: DIO_Output_config, and set properties
  set DIO_Output_config [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 DIO_Output_config ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {5} \
 ] $DIO_Output_config

  # Create ports
  set dio_clk_n_in_0 [ create_bd_port -dir I dio_clk_n_in_0 ]
  set dio_clk_p_in_0 [ create_bd_port -dir I dio_clk_p_in_0 ]
  set dio_led_bot_out_0 [ create_bd_port -dir O dio_led_bot_out_0 ]
  set dio_led_top_out_0 [ create_bd_port -dir O dio_led_top_out_0 ]
  set dio_n_in_0 [ create_bd_port -dir O -from 4 -to 0 dio_n_in_0 ]
  set dio_n_out_0 [ create_bd_port -dir I -from 4 -to 0 dio_n_out_0 ]
  set dio_oe_n_out_0 [ create_bd_port -dir O -from 4 -to 0 dio_oe_n_out_0 ]
  set dio_onewire_b_0 [ create_bd_port -dir IO dio_onewire_b_0 ]
  set dio_p_in_0 [ create_bd_port -dir O -from 4 -to 0 dio_p_in_0 ]
  set dio_p_out_0 [ create_bd_port -dir I -from 4 -to 0 dio_p_out_0 ]
  set dio_term_en_out_0 [ create_bd_port -dir O -from 4 -to 0 dio_term_en_out_0 ]

  # Create instance: debug_slice
  create_hier_cell_debug_slice [current_bd_instance .] debug_slice

  # Create instance: digitalIO_0, and set properties
  set digitalIO_0 [ create_bd_cell -type ip -vlnv ess.eu:icshwi:digitalIO:1.0 digitalIO_0 ]

  # Connections
  connect_bd_net -net Net1 [get_bd_pins ESS_OpenEVR/o_DEBUG] [get_bd_pins debug_slice/Din]
  connect_bd_net -net Net [get_bd_ports dio_onewire_b_0] [get_bd_pins digitalIO_0/dio_onewire_b]
  connect_bd_net -net digitalIO_0_dio_led_bot_out [get_bd_ports dio_led_bot_out_0] [get_bd_pins digitalIO_0/dio_led_bot_out]
  connect_bd_net -net digitalIO_0_dio_led_top_out [get_bd_ports dio_led_top_out_0] [get_bd_pins digitalIO_0/dio_led_top_out]
  connect_bd_net -net digitalIO_0_dio_n_in [get_bd_ports dio_n_in_0] [get_bd_pins digitalIO_0/dio_n_in]
  connect_bd_net -net digitalIO_0_dio_oe_n_out [get_bd_ports dio_oe_n_out_0] [get_bd_pins digitalIO_0/dio_oe_n_out]
  connect_bd_net -net digitalIO_0_dio_p_in [get_bd_ports dio_p_in_0] [get_bd_pins digitalIO_0/dio_p_in]
  connect_bd_net -net digitalIO_0_dio_term_en_out [get_bd_ports dio_term_en_out_0] [get_bd_pins digitalIO_0/dio_term_en_out]
  connect_bd_net -net dio_clk_n_in_0_1 [get_bd_ports dio_clk_n_in_0] [get_bd_pins digitalIO_0/dio_clk_n_in]
  connect_bd_net -net dio_clk_p_in_0_1 [get_bd_ports dio_clk_p_in_0] [get_bd_pins digitalIO_0/dio_clk_p_in]
  connect_bd_net -net dio_n_out_0_1 [get_bd_ports dio_n_out_0] [get_bd_pins digitalIO_0/dio_n_out]
  connect_bd_net -net dio_p_out_0_1 [get_bd_ports dio_p_out_0] [get_bd_pins digitalIO_0/dio_p_out]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins DIO_Output_config/dout] [get_bd_pins digitalIO_0/output_config] [get_bd_pins digitalIO_0/term_config]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins debug_slice/Dout] [get_bd_pins digitalIO_0/from_FPGA_0]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins debug_slice/Dout1] [get_bd_pins digitalIO_0/from_FPGA_1]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins debug_slice/Dout2] [get_bd_pins digitalIO_0/from_FPGA_2]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins debug_slice/Dout3] [get_bd_pins digitalIO_0/from_FPGA_3]
  connect_bd_net -net xlslice_4_Dout [get_bd_pins debug_slice/Dout4] [get_bd_pins digitalIO_0/from_FPGA_4]

  validate_bd_design
  save_bd_design
  # Close block design
  close_bd_design $design_name
}

# Process to add the required IP, ports and connections to the block
# diagram to support the EtherCAT Slave FMC.
#
# Takes the following required arguments:
# - design_name - name of the block diagram, ( i.e. picoevr_system_arch )
#
proc add_ecats_to_bd { design_name } {

  # Open block design
  open_bd_design [get_files $design_name.bd]

  set clk25 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 clk25 ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {25000000} \
   ] $clk25

  # Create ports
  set fmc_clk_en_o [ create_bd_port -dir O -from 0 -to 0 fmc_clk_en_o ]
  set led_err_o [ create_bd_port -dir O led_err_o ]
  set led_link_act_o [ create_bd_port -dir O -from 1 -to 0 led_link_act_o ]
  set led_run_o [ create_bd_port -dir O led_run_o ]
  set mii_rx_clk0_i [ create_bd_port -dir I mii_rx_clk0_i ]
  set mii_rx_clk1_i [ create_bd_port -dir I mii_rx_clk1_i ]
  set mii_rx_data0_i [ create_bd_port -dir I -from 3 -to 0 mii_rx_data0_i ]
  set mii_rx_data1_i [ create_bd_port -dir I -from 3 -to 0 mii_rx_data1_i ]
  set mii_rx_dv0_i [ create_bd_port -dir I mii_rx_dv0_i ]
  set mii_rx_dv1_i [ create_bd_port -dir I mii_rx_dv1_i ]
  set mii_rx_err0_i [ create_bd_port -dir I mii_rx_err0_i ]
  set mii_rx_err1_i [ create_bd_port -dir I mii_rx_err1_i ]
  set mii_tx_clk0_i [ create_bd_port -dir I mii_tx_clk0_i ]
  set mii_tx_clk1_i [ create_bd_port -dir I mii_tx_clk1_i ]
  set mii_tx_data0_o [ create_bd_port -dir O -from 3 -to 0 mii_tx_data0_o ]
  set mii_tx_data1_o [ create_bd_port -dir O -from 3 -to 0 mii_tx_data1_o ]
  set mii_tx_en0_o [ create_bd_port -dir O mii_tx_en0_o ]
  set mii_tx_en1_o [ create_bd_port -dir O mii_tx_en1_o ]
  set nreset_out [ create_bd_port -dir O -from 0 -to 0 nreset_out ]
  set phy0_an1_i [ create_bd_port -dir I phy0_an1_i ]
  set phy0_an2_i [ create_bd_port -dir I phy0_an2_i ]
  set phy0_an_en_i [ create_bd_port -dir I phy0_an_en_i ]
  set phy1_an1_i [ create_bd_port -dir I phy1_an1_i ]
  set phy1_an2_i [ create_bd_port -dir I phy1_an2_i ]
  set phy1_an_en_i [ create_bd_port -dir I phy1_an_en_i ]
  set phy0_pwdn_o [ create_bd_port -dir O -from 0 -to 0 phy0_pwdn_o ]
  set phy1_pwdn_o [ create_bd_port -dir O -from 0 -to 0 phy1_pwdn_o ]
  set prom_clk_o [ create_bd_port -dir O -type clk prom_clk_o ]
  set prom_data_ena [ create_bd_port -dir O prom_data_ena ]
  set prom_data_in [ create_bd_port -dir I prom_data_in ]
  set prom_data_out [ create_bd_port -dir O prom_data_out ]
  set sw_strap1_o [ create_bd_port -dir O -from 0 -to 0 sw_strap1_o ]
  set sw_strap2_o [ create_bd_port -dir O -from 0 -to 0 sw_strap2_o ]

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {400.0} \
   CONFIG.CLKOUT1_JITTER {356.129} \
   CONFIG.CLKOUT1_PHASE_ERROR {237.727} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {25} \
   CONFIG.CLKOUT2_JITTER {226.965} \
   CONFIG.CLKOUT2_PHASE_ERROR {237.727} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {40.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {40.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {40.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {10} \
   CONFIG.NUM_OUT_CLKS {2} \
   CONFIG.PRIM_IN_FREQ {25} \
   CONFIG.PRIM_SOURCE {Differential_clock_capable_pin} \
   CONFIG.USE_LOCKED {false} \
   CONFIG.USE_RESET {false} \
 ] $clk_wiz_0

  # Create instance: ecat_fmc_clk_en_const_0,  and set properties
  set ecat_fmc_clk_en_const_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_fmc_clk_en_const_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
 ] $ecat_fmc_clk_en_const_0

  # Create instance: ecat_slave_const_00, and set properties
  set ecat_slave_const_00 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_00 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {2} \
 ] $ecat_slave_const_00

  # Create instance: ecat_slave_const_1, and set properties
  set ecat_slave_const_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_1 ]

  # Create instance: ecat_slave_const_xAA, and set properties
  set ecat_slave_const_xAA [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_xAA ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {170} \
   CONFIG.CONST_WIDTH {8} \
 ] $ecat_slave_const_xAA

  # Create instance: ecat_slave_const_xBB, and set properties
  set ecat_slave_const_xBB [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_xBB ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {187} \
   CONFIG.CONST_WIDTH {8} \
 ] $ecat_slave_const_xBB

  # Create instance: ecat_slave_const_xCC, and set properties
  set ecat_slave_const_xCC [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_xCC ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {204} \
   CONFIG.CONST_WIDTH {8} \
 ] $ecat_slave_const_xCC

  # Create instance: ecat_slave_const_xDD, and set properties
  set ecat_slave_const_xDD [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_slave_const_xDD ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {221} \
   CONFIG.CONST_WIDTH {8} \
 ] $ecat_slave_const_xDD

  # Create instance: ecats_reset_0, and set properties
  set ecats_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 ecats_reset_0 ]

  # Create instance: mini_ioc_ecat_slave_0, and set properties
  set mini_ioc_ecat_slave_0 [ create_bd_cell -type ip -vlnv user.org:user:mini_ioc_ecat_slave:1.0 mini_ioc_ecat_slave_0 ]

  # Create instance: strappiing_const, and set properties
  set strappiing_const [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 strappiing_const ]

  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN1_D_0_1 [get_bd_intf_ports clk25] [get_bd_intf_pins clk_wiz_0/CLK_IN1_D]

  # Create port connections
  connect_bd_net -net ESS_OpenEVR_o_TS_data [get_bd_pins ESS_OpenEVR/o_TS_data] [get_bd_pins mini_ioc_ecat_slave_0/PDI_GPI]
  connect_bd_net -net MII_RX_CLK0_0_1 [get_bd_ports mii_rx_clk0_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_CLK0]
  connect_bd_net -net MII_RX_CLK1_0_1 [get_bd_ports mii_rx_clk1_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_CLK1]
  connect_bd_net -net MII_RX_DATA0_0_1 [get_bd_ports mii_rx_data0_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_DATA0]
  connect_bd_net -net MII_RX_DATA1_0_1 [get_bd_ports mii_rx_data1_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_DATA1]
  connect_bd_net -net MII_RX_DV0_0_1 [get_bd_ports mii_rx_dv0_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_DV0]
  connect_bd_net -net MII_RX_DV1_0_1 [get_bd_ports mii_rx_dv1_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_DV1]
  connect_bd_net -net MII_RX_ERR0_0_1 [get_bd_ports mii_rx_err0_i]  [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_ERR0]
  connect_bd_net -net MII_RX_ERR1_0_1 [get_bd_ports mii_rx_err1_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_RX_ERR1]
  connect_bd_net -net MII_TX_CLK0_0_1 [get_bd_ports mii_tx_clk0_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_CLK0]
  connect_bd_net -net MII_TX_CLK1_0_1 [get_bd_ports mii_tx_clk1_i] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_CLK1]
  connect_bd_net -net PROM_DATA_IN_0_1 [get_bd_ports prom_data_in] [get_bd_pins mini_ioc_ecat_slave_0/PROM_DATA_IN]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins mini_ioc_ecat_slave_0/CLK25]
  connect_bd_net -net clk_wiz_0_clk_out2 [get_bd_pins clk_wiz_0/clk_out2] [get_bd_pins mini_ioc_ecat_slave_0/CLK100]
  connect_bd_net -net ecat_slave_const_00_dout [get_bd_pins ecat_slave_const_00/dout] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_SHIFT0] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_SHIFT1]
  connect_bd_net -net ecat_slave_const_1_dout [get_bd_pins ecat_slave_const_1/dout] [get_bd_pins mini_ioc_ecat_slave_0/PROM_SIZE]
  connect_bd_net -net ecat_slave_const_2_dout [get_bd_pins ecat_slave_const_xAA/dout] [get_bd_pins mini_ioc_ecat_slave_0/PDI_DIGI_DATA_IN0]
  connect_bd_net -net ecat_slave_const_xBB_dout [get_bd_pins ecat_slave_const_xBB/dout] [get_bd_pins mini_ioc_ecat_slave_0/PDI_DIGI_DATA_IN1]
  connect_bd_net -net ecat_slave_const_xCC_dout [get_bd_pins ecat_slave_const_xCC/dout] [get_bd_pins mini_ioc_ecat_slave_0/PDI_DIGI_DATA_IN2]
  connect_bd_net -net ecat_slave_const_xDD_dout [get_bd_pins ecat_slave_const_xDD/dout] [get_bd_pins mini_ioc_ecat_slave_0/PDI_DIGI_DATA_IN3]
  connect_bd_net -net mini_ioc_ecat_slave_0_LED_ERR [get_bd_ports led_err_o] [get_bd_pins mini_ioc_ecat_slave_0/LED_ERR]
  connect_bd_net -net mini_ioc_ecat_slave_0_LED_LINK_ACT [get_bd_ports led_link_act_o] [get_bd_pins mini_ioc_ecat_slave_0/LED_LINK_ACT]
  connect_bd_net -net mini_ioc_ecat_slave_0_LED_RUN [get_bd_ports led_run_o] [get_bd_pins mini_ioc_ecat_slave_0/LED_RUN]
  connect_bd_net -net mini_ioc_ecat_slave_0_MII_TX_DATA0 [get_bd_ports mii_tx_data0_o] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_DATA0]
  connect_bd_net -net mini_ioc_ecat_slave_0_MII_TX_DATA1 [get_bd_ports mii_tx_data1_o] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_DATA1]
  connect_bd_net -net mini_ioc_ecat_slave_0_MII_TX_ENA0 [get_bd_ports mii_tx_en0_o] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_ENA0]
  connect_bd_net -net mini_ioc_ecat_slave_0_MII_TX_ENA1 [get_bd_ports mii_tx_en1_o] [get_bd_pins mini_ioc_ecat_slave_0/MII_TX_ENA1]
  connect_bd_net -net mini_ioc_ecat_slave_0_PROM_CLK [get_bd_ports prom_clk_o] [get_bd_pins mini_ioc_ecat_slave_0/PROM_CLK]
  connect_bd_net -net mini_ioc_ecat_slave_0_PROM_DATA_ENA [get_bd_ports prom_data_ena] [get_bd_pins mini_ioc_ecat_slave_0/PROM_DATA_ENA]
  connect_bd_net -net mini_ioc_ecat_slave_0_PROM_DATA_OUT [get_bd_ports prom_data_out] [get_bd_pins mini_ioc_ecat_slave_0/PROM_DATA_OUT]
  connect_bd_net -net nMII_LINK1_0_1 [get_bd_ports phy1_an1_i] [get_bd_pins mini_ioc_ecat_slave_0/nMII_LINK1]
  connect_bd_net -net phy0_an1_i [get_bd_ports phy0_an1_i] [get_bd_pins mini_ioc_ecat_slave_0/nMII_LINK0]
  connect_bd_net -net strappiing_const_dout [get_bd_ports phy0_pwdn_o] [get_bd_ports phy1_pwdn_o] [get_bd_ports sw_strap1_o] [get_bd_ports sw_strap2_o] [get_bd_pins strappiing_const/dout]
  connect_bd_net -net fmc_clk_en_dout [get_bd_ports fmc_clk_en_o] [get_bd_pins ecat_fmc_clk_en_const_0/dout]
  connect_bd_net [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins ecats_reset_0/slowest_sync_clk]
  connect_bd_net [get_bd_pins ecats_reset_0/ext_reset_in] [get_bd_pins processing_system7_0/FCLK_RESET0_N]
  connect_bd_net [get_bd_pins ecats_reset_0/peripheral_aresetn] [get_bd_pins mini_ioc_ecat_slave_0/NRESET] [get_bd_ports nreset_out]

  # Assign memory-mapped address for AXI GPIO
  assign_bd_address -offset 0x43C20000 -range 0x00010000 -target_address_space [get_bd_addr_spaces processing_system7_0/Data] [get_bd_addr_segs axi_gpio_0/S_AXI/Reg] -force

  validate_bd_design
  save_bd_design
  # Close block design
  close_bd_design $design_name
}

# Process to add the required IP, ports and connections to the block
# diagram to support the EtherCAT Master, using the EtherCAT Slave FMC.
#
# Takes the following required arguments:
# - design_name - name of the block diagram, ( i.e. picoevr_system_arch )
#
proc add_ecatm_to_bd { design_name } {

  # Open block design
  open_bd_design [get_files $design_name.bd]

  # Enable Ethernet 1 interface on the processing system
  set_property -dict [list CONFIG.PCW_ENET1_PERIPHERAL_ENABLE {1} CONFIG.PCW_ENET1_GRP_MDIO_ENABLE {1} CONFIG.PCW_ENET1_PERIPHERAL_FREQMHZ {100 Mbps}] [get_bd_cells processing_system7_0]

  set clk25 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 clk25 ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {25000000} \
   ] $clk25

  set mdio [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:mdio_rtl:1.0 mdio ]

  # Create ports
  set fmc_clk_en_o [ create_bd_port -dir O -from 0 -to 0 fmc_clk_en_o ]
  set led_err_o [ create_bd_port -dir O led_err_o ]
  set led_link_act_o [ create_bd_port -dir O -from 1 -to 0 led_link_act_o ]
  set led_run_o [ create_bd_port -dir O led_run_o ]
  set mii_rx_clk1_i [ create_bd_port -dir I mii_rx_clk1_i ]
  set mii_rx_data1_i [ create_bd_port -dir I -from 3 -to 0 mii_rx_data1_i ]
  set mii_rx_dv1_i [ create_bd_port -dir I mii_rx_dv1_i ]
  set mii_rx_crs1_i [ create_bd_port -dir I mii_rx_crs1_i ]
  set mii_rx_col1_i [ create_bd_port -dir I mii_rx_col1_i ]
  set mii_rx_err1_i [ create_bd_port -dir I mii_rx_err1_i ]
  set mii_tx_clk1_i [ create_bd_port -dir I mii_tx_clk1_i ]
  set mii_tx_data1_o [ create_bd_port -dir O -from 3 -to 0 mii_tx_data1_o ]
  set mii_tx_en1_o [ create_bd_port -dir O mii_tx_en1_o ]
  set nreset_out [ create_bd_port -dir O -from 0 -to 0 nreset_out ]
  set phy1_an1_i [ create_bd_port -dir I phy1_an1_i ]
  set phy1_an2_i [ create_bd_port -dir I phy1_an2_i ]
  set phy1_an_en_i [ create_bd_port -dir I phy1_an_en_i ]
  set phy0_pwdn_o [ create_bd_port -dir O -from 0 -to 0 phy0_pwdn_o ]
  set phy1_pwdn_o [ create_bd_port -dir O -from 0 -to 0 phy1_pwdn_o ]
  set prom_clk_o [ create_bd_port -dir O -type clk prom_clk_o ]
  set prom_data_ena [ create_bd_port -dir O prom_data_ena ]
  set prom_data_in [ create_bd_port -dir I prom_data_in ]
  set prom_data_out [ create_bd_port -dir O prom_data_out ]
  set sw_strap1_o [ create_bd_port -dir O -from 0 -to 0 sw_strap1_o ]
  set sw_strap2_o [ create_bd_port -dir O -from 0 -to 0 sw_strap2_o ]

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {400.0} \
   CONFIG.CLKOUT1_JITTER {356.129} \
   CONFIG.CLKOUT1_PHASE_ERROR {237.727} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {25} \
   CONFIG.CLKOUT2_JITTER {226.965} \
   CONFIG.CLKOUT2_PHASE_ERROR {237.727} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {40.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {40.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {40.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {10} \
   CONFIG.NUM_OUT_CLKS {2} \
   CONFIG.PRIM_IN_FREQ {25} \
   CONFIG.PRIM_SOURCE {Differential_clock_capable_pin} \
   CONFIG.USE_LOCKED {false} \
   CONFIG.USE_RESET {false} \
  ] $clk_wiz_0

  # Create instance: ecat_fmc_clk_en_const_0,  and set properties
  set ecat_fmc_clk_en_const_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ecat_fmc_clk_en_const_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
  ] $ecat_fmc_clk_en_const_0


  # Create instance: ecats_reset_0, and set properties
  set ecats_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 ecats_reset_0 ]

  # Create instance: strappiing_const, and set properties
  set strappiing_const [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 strappiing_const ]

  # Create instance: mii_rx_data_pad_const, and set properties
  set mii_rx_data_pad_const [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 mii_rx_data_pad_const ]
  set_property -dict [list \
    CONFIG.CONST_WIDTH {4} \
    CONFIG.CONST_VAL {0} \
  ] $mii_rx_data_pad_const

  set mii_rx_data_concat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 mii_rx_data_concat_0 ]

  # Create instance: mii_tx_data_slice_0, and set properties
  set mii_tx_data_slice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 mii_tx_data_slice_0 ]
  set_property -dict [list \
    CONFIG.DIN_FROM {3} \
    CONFIG.DIN_WIDTH {8} \
    CONFIG.DOUT_WIDTH {4} \
  ] $mii_tx_data_slice_0

  # Create instance: led_link0_const, and set properties
  set led_link0_const [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 led_link0_const ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $led_link0_const

  # Create instance: led_link_concat, and set properties
  set led_link_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 led_link_concat ]

  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN1_D_0_1 [get_bd_intf_ports clk25] [get_bd_intf_pins clk_wiz_0/CLK_IN1_D]
  connect_bd_intf_net -intf_net processing_system7_0_MDIO_ETHERNET_1 [get_bd_intf_ports mdio] [get_bd_intf_pins processing_system7_0/MDIO_ETHERNET_1]

  # Connect Ethernet connections
  connect_bd_net [get_bd_ports mii_rx_crs1_i] [get_bd_pins processing_system7_0/ENET1_GMII_CRS]
  connect_bd_net [get_bd_ports mii_rx_clk1_i] [get_bd_pins processing_system7_0/ENET1_GMII_RX_CLK]
  connect_bd_net [get_bd_ports mii_rx_dv1_i] [get_bd_pins processing_system7_0/ENET1_GMII_RX_DV]
  connect_bd_net [get_bd_ports mii_rx_col1_i] [get_bd_pins processing_system7_0/ENET1_GMII_COL]
  connect_bd_net [get_bd_ports mii_rx_err1_i] [get_bd_pins processing_system7_0/ENET1_GMII_RX_ER]
  connect_bd_net [get_bd_pins processing_system7_0/ENET1_GMII_RXD] [get_bd_pins mii_rx_data_concat_0/dout]
  connect_bd_net [get_bd_ports mii_rx_data1_i] [get_bd_pins mii_rx_data_concat_0/In0]
  connect_bd_net [get_bd_pins mii_rx_data_pad_const/dout] [get_bd_pins mii_rx_data_concat_0/In1]
  connect_bd_net [get_bd_ports mii_tx_clk1_i] [get_bd_pins processing_system7_0/ENET1_GMII_TX_CLK]
  connect_bd_net [get_bd_pins mii_tx_data_slice_0/Din] [get_bd_pins processing_system7_0/ENET1_GMII_TXD]
  connect_bd_net [get_bd_ports mii_tx_data1_o] [get_bd_pins mii_tx_data_slice_0/Dout]
  connect_bd_net [get_bd_ports mii_tx_en1_o] [get_bd_pins processing_system7_0/ENET1_GMII_TX_EN]

  # LEDs
  connect_bd_net -net led_link_concat_dout [get_bd_ports led_link_act_o] [get_bd_pins led_link_concat/dout]
  connect_bd_net -net phy1_an1_i_1 [get_bd_ports phy1_an1_i] [get_bd_pins led_link_concat/In1]
  connect_bd_net -net phy1_an2_i_1 [get_bd_ports led_err_o] [get_bd_ports phy1_an2_i]
  connect_bd_net -net phy1_an_en_i_1 [get_bd_ports led_run_o] [get_bd_ports phy1_an_en_i]
  connect_bd_net -net led_link0_const_dout [get_bd_pins led_link0_const/dout] [get_bd_pins led_link_concat/In0]

  connect_bd_net [get_bd_pins ecats_reset_0/ext_reset_in] [get_bd_pins processing_system7_0/FCLK_RESET0_N]
  connect_bd_net -net fmc_clk_en_dout [get_bd_ports fmc_clk_en_o] [get_bd_pins ecat_fmc_clk_en_const_0/dout]
  connect_bd_net -net strappiing_const_dout [get_bd_ports phy0_pwdn_o] [get_bd_ports phy1_pwdn_o] [get_bd_ports sw_strap1_o] [get_bd_ports sw_strap2_o] [get_bd_pins strappiing_const/dout]
  connect_bd_net [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins ecats_reset_0/slowest_sync_clk]
  connect_bd_net [get_bd_ports nreset_out] [get_bd_pins ecats_reset_0/peripheral_aresetn]

  validate_bd_design
  save_bd_design
  # Close block design
  close_bd_design $design_name

}

# Process to add the required top-level ports, component definition,
# component instantiation, signals and logic to the HDL wrapper file.
#
# Takes the following required arguments:
#  - top_hdl      - existing top-level HDL wrapper file
#                   (i.e, picoevr_system_arch_wrapper_revE.vhd )
#  - new_top_name - new top-level HDL wrapper file that will be generated by
#                   this process ( i.e., picoevr_system_arch_wrapper_revE.vhd )
#  - hdl_dir      - path to the directory containing the HDL sources
#                   (HDL wrappers, and required HDL snippets)
#  - bd_name      - name of the Vivado block design,( i.e. picoevr_system_arch )
#  - fmc          - Name of the FMC we are adding ( dio / ecats )
#
proc add_fmc_to_top { top_hdl new_top_name hdl_dir bd_name fmc } {
    # Create new wrapper file
    # Strip extension from existing wrapper name
    set new_top [ open ${hdl_dir}/${new_top_name}  w]
    # Open existing wrapper for reading
    set top_fhandle [ open ${hdl_dir}/${top_hdl} r+ ]
    set foundEntity 0
    # Read existing wrapper line-by-line
    while {[gets $top_fhandle line] >= 0} {
        if { [string first "port (" $line] != -1 && $foundEntity == 0} {
            # Find entity declaration
            puts $new_top $line
            set entity_snip [ open $hdl_dir/picoevr_${fmc}_entity.snip r+]
            while {[gets $entity_snip e_line] >= 0} {
                puts $new_top $e_line
            }
            close $entity_snip
            set foundEntity 1
        } elseif { [string first "port (" $line ] != -1 && $foundEntity == 1 } {
            # Find component declaration
            puts $new_top $line
            # Check for component snip
            if { [file exist $hdl_dir/picoevr_${fmc}_comp.snip] == 1 } {
                set comp_snip [ open $hdl_dir/picoevr_${fmc}_comp.snip r+]
            } else {
                # Otherwise, use identical entity snip
                set comp_snip [ open $hdl_dir/picoevr_${fmc}_entity.snip r+]
            }
            while {[gets $comp_snip c_line] >= 0} {
                puts $new_top $c_line
            }
            close $comp_snip
        } elseif { [string first "port map (" $line ] != -1 && $foundEntity == 1 } {
            # Find component instantiation
            puts $new_top $line
            set portmap_snip [ open $hdl_dir/picoevr_${fmc}_portmap.snip r+]
            while {[gets $portmap_snip p_line] >= 0} {
                puts $new_top $p_line
            }
            close $portmap_snip
        } elseif { [string first "end component ${bd_name}" $line ] != -1 } {
            puts $new_top $line
            # If FMC has additional signals in the wrapper
            if { [file exist $hdl_dir/picoevr_${fmc}_signals.snip] == 1 } {
                # Check we are at the end of the component declaration
                set signals_snip [ open $hdl_dir/picoevr_${fmc}_signals.snip r+]
                while {[gets $signals_snip s_line] >= 0} {
                    puts $new_top $s_line
                }
                close $signals_snip
            }
        } elseif { [string first "end STRUCTURE;" $line ] != -1 } {
            # If FMC has additional signals in the wrapper
            if { [file exist $hdl_dir/picoevr_${fmc}_logic.snip] == 1 } {
                # Check we are at the end of the component declaration
                set logic_snip [ open $hdl_dir/picoevr_${fmc}_logic.snip r+]
                while {[gets $logic_snip l_line] >= 0} {
                    puts $new_top $l_line
                }
                close $logic_snip
            }
            puts $new_top $line
        } else {
            # Copy line from existing wrapper to new wrapper
            puts $new_top $line
        }
    }

    # Close all files
    close $new_top
    close $top_fhandle
}

# Load the modules that depend on the hw revision
set where [file dirname [info script]]
puts "Sourcing external configuration files..."
source [file join $where picoevr_${carrier_hw_rev}.tcl]


# End of cr_bd_picoevr_system_arch()
cr_bd_picoevr_system_arch "" bd_name
set_property REGISTERED_WITH_MANAGER "1" [get_files picoevr_system_arch.bd ]
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files picoevr_system_arch.bd ]

# Strip file extension from existing HDL wrapper file and form new name with extension
set new_top_file "[file rootname [ file tail $hdl_wrapper_file ]]_final.vhd"

if {[string equal $add_dio "yes"]} {
    puts "Adding DIO FMC to $bd_name..."
    add_dio_to_bd $bd_name
    # Modify top-level HDL wrapper file
    add_fmc_to_top $hdl_wrapper_file $new_top_file $hdl_dir $bd_name dio
    # Add DIO constraints file
    add_constr_file $origin_dir "picoevr_dio.xdc" $constr_obj $constr_file
} elseif {[string equal $add_ecats "yes"]} {
    puts "Adding ECATS FMC to $bd_name..."
    add_ecats_to_bd $bd_name
    # Modify top-level HDL wrapper file
    add_fmc_to_top $hdl_wrapper_file $new_top_file $hdl_dir $bd_name ecats
    # Add ECATS FMC constraints file
    add_constr_file $origin_dir "picoevr_ecats.xdc" $constr_obj $constr_file
} elseif {[string equal $add_ecatm "yes"]} {
    puts "Adding ECATM FMC to $bd_name..."
    add_ecatm_to_bd $bd_name
    # Modify top-level HDL wrapper file
    add_fmc_to_top $hdl_wrapper_file $new_top_file $hdl_dir $bd_name ecatm
    # Add ECATS constraints file
    # It is the same for slave or master
    add_constr_file $origin_dir "picoevr_ecats.xdc" $constr_obj $constr_file
} else {
    # Copy source wrapper to "final" wrapper
    file copy -force ${hdl_dir}/${hdl_wrapper_file} ${hdl_dir}/${new_top_file}
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize ${hdl_dir}/${new_top_file}] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file ${hdl_dir}/${new_top_file}
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "picoevr_system_arch_wrapper" -objects $obj

set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$constr_file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z030sbg485-1 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z030sbg485-1 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
